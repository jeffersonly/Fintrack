type Goal @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"})
@auth(rules: [{ allow: owner }])
{
  id: ID!
  savingsGoal: Float!
  spendingsGoal: Float!
  owner: String
}

type SplitEven @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"})
@auth(rules: [{ allow: owner }])
{
  id: ID!
  month: String!
  day: String!
  year: String!
  size: String!
  total: Float!
  tax: Float!
  tip: Float!
  evenSplit: Float!
}

type SplitItem @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"})
@auth(rules: [{ allow: owner }])
{
  id: ID!
  month: String!
  day: String!
  year: String!
  total: String!
  tax: Float!
  tip: Float!
  names: String!
  split: String!
}

type Saving @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"})
@auth(rules: [{ allow: owner }])
@key (
  fields: ["owner", "name"]
  queryField: "savingsByOwner"
  name: "ownerIndex"
)
{
  id: ID!
  month: String!
  day: String!
  year: String!
  name: String!
  value: Float!
  repeat: String!
  note: String!
  owner: String
  repeated: Boolean
}

type Spending @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"}) 
@auth(rules: [{ allow: owner }])
@key (
  fields: ["owner", "name"]
  queryField: "spendingsByOwner"
  name: "spendingIndex"
)
{
  id: ID!
  month: String!
  day: String!
  year: String!
  name: String!
  value: Float!
  category: String!
  repeat: String!
  note: String!
  owner: String
  payment: String!
  repeated: Boolean

  # Reference the S3Object type from a field
  file: S3Object
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}